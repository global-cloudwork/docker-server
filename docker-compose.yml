services:
  traefik:
    image: "traefik"
    restart: always
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true"
      - "--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}"
      - "--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - traefik_data:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    ports:
      - "127.0.0.1:5678:5678"
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.n8n.tls=true
      - traefik.http.routers.n8n.entrypoints=web,websecure
      - traefik.http.routers.n8n.tls.certresolver=mytlschallenge
      - traefik.http.middlewares.n8n.headers.SSLRedirect=true
      - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
      - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
      - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
      - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
      - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME}
      - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.n8n.headers.STSPreload=true
      - traefik.http.routers.n8n.middlewares=n8n@docker
    environment:
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_RUNNERS_ENABLED=true
      - NODE_ENV=production
      - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - TZ=${GENERIC_TIMEZONE}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./local-files:/files

volumes:
  n8n_data:
  traefik_data:

# services:
#   traefik:
#     image: "traefik"
#     restart: always
#     networks: ['demo']
#     command:
#       - "--api.insecure=true"
#       - "--providers.docker=true"
#       - "--providers.docker.exposedbydefault=false"
#       - "--entrypoints.web.address=:80"
#       - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
#       - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
#       - "--entrypoints.websecure.address=:443"
#       - "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true"
#       - "--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}"
#       - "--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json"
#     ports:
#       - "80:80"
#       - "443:443"
#     volumes:
#       - traefik_data:/letsencrypt
#       - /var/run/docker.sock:/var/run/docker.sock:ro

#   n8n:
#     image: docker.n8n.io/n8nio/n8n
#     restart: always
#     networks: ['demo']
#     ports:
#       - "127.0.0.1:5678:5678"
#     labels:
#       - traefik.enable=true
#       - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)
#       - traefik.http.routers.n8n.tls=true
#       - traefik.http.routers.n8n.entrypoints=web,websecure
#       - traefik.http.routers.n8n.tls.certresolver=mytlschallenge
#       - traefik.http.middlewares.n8n.headers.SSLRedirect=true
#       - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
#       - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
#       - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
#       - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
#       - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME}
#       - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
#       - traefik.http.middlewares.n8n.headers.STSPreload=true
#       - traefik.http.routers.n8n.middlewares=n8n@docker
#     environment:
#       - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
#       - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
#       - N8N_PORT=5678
#       - N8N_PROTOCOL=https
#       - N8N_RUNNERS_ENABLED=true
#       - NODE_ENV=production
#       - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
#       - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
#       - TZ=${GENERIC_TIMEZONE}
#     volumes:
#       - n8n_data:/home/node/.n8n
#       - ./local-files:/files

#   postgres:
#     image: postgres:16-alpine
#     hostname: postgres
#     networks: ['demo']
#     restart: unless-stopped
#     environment:
#       - POSTGRES_USER
#       - POSTGRES_PASSWORD
#       - POSTGRES_DB
#     volumes:
#       - postgres_storage:/var/lib/postgresql/data
#     healthcheck:
#       test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
#       interval: 5s
#       timeout: 5s
#       retries: 10

#   qdrant:
#     image: qdrant/qdrant
#     hostname: qdrant
#     container_name: qdrant
#     networks: ['demo']
#     restart: unless-stopped
#     ports:
#       - 6333:6333
#     volumes:
#       - qdrant_storage:/qdrant/storage

# volumes:
#   n8n_data:
#   traefik_data:
#   qdrant_data:
#   postgres_data:

# networks:
#   demo:

# services:
#   postgres:
#     image: postgres:16-alpine
#     hostname: postgres
#     networks: ['demo']
#     restart: unless-stopped
#     environment:
#       - POSTGRES_USER
#       - POSTGRES_PASSWORD
#       - POSTGRES_DB
#     volumes:
#       - postgres_storage:/var/lib/postgresql/data
#     healthcheck:
#       test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
#       interval: 5s
#       timeout: 5s
#       retries: 10

#   n8n:
#     hostname: n8n
#     container_name: n8n
#     restart: unless-stopped
#     ports:
#       - 5678:5678
#     volumes:
#       - n8n_storage:/home/node/.n8n
#       - ./n8n/demo-data:/demo-data
#       - ./shared:/data/shared
#     depends_on:
#       postgres:
#         condition: service_healthy
#       n8n-import:
#         condition: service_completed_successfully
#       image: n8nio/n8n:latest
#       networks: ['demo']
#       environment:
#         - DB_TYPE=postgresdb
#         - DB_POSTGRESDB_HOST=postgres
#         - DB_POSTGRESDB_USER=${POSTGRES_USER}
#         - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
#         - N8N_DIAGNOSTICS_ENABLED=false
#         - N8N_PERSONALIZATION_ENABLED=false
#         - N8N_ENCRYPTION_KEY
#         - N8N_USER_MANAGEMENT_JWT_SECRET
#         - OLLAMA_HOST=${OLLAMA_HOST:-ollama:11434}
#       env_file:
#         - path: .env
#           required: true



#   ollama-cpu:
#     profiles: ["cpu"]
#     <<: *service-ollama

#   ollama-gpu:
#     profiles: ["gpu-nvidia"]
#     <<: *service-ollama
#     deploy:
#       resources:
#         reservations:
#           devices:
#             - driver: nvidia
#               count: 1
#               capabilities: [gpu]

#   ollama-gpu-amd:
#     profiles: ["gpu-amd"]
#     <<: *service-ollama
#     image: ollama/ollama:rocm
#     devices:
#       - "/dev/kfd"
#       - "/dev/dri"

#   ollama-pull-llama-cpu:
#     profiles: ["cpu"]
#     <<: *init-ollama
#     depends_on:
#       - ollama-cpu

#   ollama-pull-llama-gpu:
#     profiles: ["gpu-nvidia"]
#     <<: *init-ollama
#     depends_on:
#       - ollama-gpu

#   ollama-pull-llama-gpu-amd:
#     profiles: [gpu-amd]
#     <<: *init-ollama
#     image: ollama/ollama:rocm
#     depends_on:
#      - ollama-gpu-amd
